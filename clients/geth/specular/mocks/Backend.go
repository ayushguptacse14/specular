// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	core "github.com/ethereum/go-ethereum/core"
	mock "github.com/stretchr/testify/mock"

	state "github.com/ethereum/go-ethereum/core/state"

	types "github.com/ethereum/go-ethereum/core/types"
)

// Backend is an autogenerated mock type for the Backend type
type Backend struct {
	mock.Mock
}

// BlockChain provides a mock function with given fields:
func (_m *Backend) BlockChain() *core.BlockChain {
	ret := _m.Called()

	var r0 *core.BlockChain
	if rf, ok := ret.Get(0).(func() *core.BlockChain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.BlockChain)
		}
	}

	return r0
}

// StateAtBlock provides a mock function with given fields: block, reexec, base, checkLive, preferDisk
func (_m *Backend) StateAtBlock(block *types.Block, reexec uint64, base *state.StateDB, checkLive bool, preferDisk bool) (*state.StateDB, error) {
	ret := _m.Called(block, reexec, base, checkLive, preferDisk)

	var r0 *state.StateDB
	if rf, ok := ret.Get(0).(func(*types.Block, uint64, *state.StateDB, bool, bool) *state.StateDB); ok {
		r0 = rf(block, reexec, base, checkLive, preferDisk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.StateDB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Block, uint64, *state.StateDB, bool, bool) error); ok {
		r1 = rf(block, reexec, base, checkLive, preferDisk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxPool provides a mock function with given fields:
func (_m *Backend) TxPool() *core.TxPool {
	ret := _m.Called()

	var r0 *core.TxPool
	if rf, ok := ret.Get(0).(func() *core.TxPool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.TxPool)
		}
	}

	return r0
}

type mockConstructorTestingTNewBackend interface {
	mock.TestingT
	Cleanup(func())
}

// NewBackend creates a new instance of Backend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBackend(t mockConstructorTestingTNewBackend) *Backend {
	mock := &Backend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
